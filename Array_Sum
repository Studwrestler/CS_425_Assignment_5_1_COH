#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 1000000

int main(int argc, char* argv[]){
        int rank, size;
        MPI_Init(&argc, &argv);
        MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        MPI_Comm_size(MPI_COMM_WORLD, &size);

        int chunk_size = N /size;
        int* numbers = NULL;
        int* local_numbers = (int*)malloc(chunk_size * sizeof(int));
        if (rank == 0) {
                numbers = (int*)malloc(N * sizeof(int));
                for (int i = 0; i < N; i++) {
                numbers[i] = i + 1;
                }
        }

        MPI_Scatter(numbers, chunk_size, MPI_INT, local_numbers, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);
        long long local_sum = 0;
        for (int i = 0; i <=chunk_size; i++){
                local_sum += local_numbers[i];
        }
        long long total_sum = 0;
        double start_time = MPI_Wtime();
        MPI_Reduce(&local_sum, &total_sum, 1, MPI_LONG_LONG, MPI_SUM, 0, MPI_COMM_WORLD);
        double end_time = MPI_Wtime();
        if(rank == 0){
                long long expected_sum = ((long long)N * (N+1))/2;
                printf("Total Sum: %lld\n", total_sum);
                printf("Expected Sum (Gauss Formula): %lld\n", expected_sum);
                printf("Correctness: %s\n", (total_sum == expected_sum) ? "Correct" : "Incorrect");
                printf("Wall Time: %f seconds\n", end_time - start_time);
                free(numbers);
        }

        free(local_numbers);
        MPI_Barrier(MPI_COMM_WORLD);
        MPI_Finalize();
        return 0;
}
